
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000181c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08001928  08001928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f8  080019f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019fc  080019fc  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a0c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000331d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f7d  00000000  00000000  00023352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  000242d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000360  00000000  00000000  000246c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015af6  00000000  00000000  00024a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004d64  00000000  00000000  0003a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bc2b  00000000  00000000  0003f282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000baead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d74  00000000  00000000  000baf00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001910 	.word	0x08001910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001910 	.word	0x08001910

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b29      	ldr	r3, [pc, #164]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a28      	ldr	r2, [pc, #160]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b26      	ldr	r3, [pc, #152]	; (8000208 <MX_GPIO_Init+0xbc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b23      	ldr	r3, [pc, #140]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a22      	ldr	r2, [pc, #136]	; (8000208 <MX_GPIO_Init+0xbc>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b20      	ldr	r3, [pc, #128]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b1d      	ldr	r3, [pc, #116]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1c      	ldr	r2, [pc, #112]	; (8000208 <MX_GPIO_Init+0xbc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1a      	ldr	r3, [pc, #104]	; (8000208 <MX_GPIO_Init+0xbc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b17      	ldr	r3, [pc, #92]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a16      	ldr	r2, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b14      	ldr	r3, [pc, #80]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDBIT0_Pin|LEDBIT1_Pin|LEDBIT2_Pin|LEDBIT3_Pin
 80001c0:	2200      	movs	r2, #0
 80001c2:	213f      	movs	r1, #63	; 0x3f
 80001c4:	4811      	ldr	r0, [pc, #68]	; (800020c <MX_GPIO_Init+0xc0>)
 80001c6:	f000 fd9f 	bl	8000d08 <HAL_GPIO_WritePin>
                          |LEDBIT4_Pin|LEDBIT5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LEDBIT0_Pin|LEDBIT1_Pin|LEDBIT2_Pin|LEDBIT3_Pin
 80001ca:	233f      	movs	r3, #63	; 0x3f
 80001cc:	613b      	str	r3, [r7, #16]
                          |LEDBIT4_Pin|LEDBIT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ce:	2301      	movs	r3, #1
 80001d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d2:	2300      	movs	r3, #0
 80001d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	480a      	ldr	r0, [pc, #40]	; (800020c <MX_GPIO_Init+0xc0>)
 80001e2:	f000 fafb 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UButton_Pin;
 80001e6:	2301      	movs	r3, #1
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <MX_GPIO_Init+0xc4>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <MX_GPIO_Init+0xc8>)
 80001fa:	f000 faef 	bl	80007dc <HAL_GPIO_Init>

}
 80001fe:	bf00      	nop
 8000200:	3720      	adds	r7, #32
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	40010800 	.word	0x40010800
 8000210:	10110000 	.word	0x10110000
 8000214:	40010c00 	.word	0x40010c00

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 f94f 	bl	80004c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f87d 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f7ff ff91 	bl	800014c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int pressed = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    if ( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 800022e:	2101      	movs	r1, #1
 8000230:	4839      	ldr	r0, [pc, #228]	; (8000318 <main+0x100>)
 8000232:	f000 fd43 	bl	8000cbc <HAL_GPIO_ReadPin>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d015      	beq.n	8000268 <main+0x50>
    {
      ++pressed;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3301      	adds	r3, #1
 8000240:	607b      	str	r3, [r7, #4]
      if (pressed == 6)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b06      	cmp	r3, #6
 8000246:	d101      	bne.n	800024c <main+0x34>
          {
            pressed = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	607b      	str	r3, [r7, #4]
          }
      HAL_Delay(50);
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f000 f999 	bl	8000584 <HAL_Delay>
      while( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 8000252:	bf00      	nop
 8000254:	2101      	movs	r1, #1
 8000256:	4830      	ldr	r0, [pc, #192]	; (8000318 <main+0x100>)
 8000258:	f000 fd30 	bl	8000cbc <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f8      	bne.n	8000254 <main+0x3c>
      {}
      HAL_Delay(50);
 8000262:	2032      	movs	r0, #50	; 0x32
 8000264:	f000 f98e 	bl	8000584 <HAL_Delay>
    }

    if (pressed == 0)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d109      	bne.n	8000282 <main+0x6a>
    {
      HAL_GPIO_TogglePin(LEDBIT0_GPIO_Port, LEDBIT0_Pin);
 800026e:	2101      	movs	r1, #1
 8000270:	482a      	ldr	r0, [pc, #168]	; (800031c <main+0x104>)
 8000272:	f000 fd7b 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT5_GPIO_Port, LEDBIT5_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2120      	movs	r1, #32
 800027a:	4828      	ldr	r0, [pc, #160]	; (800031c <main+0x104>)
 800027c:	f000 fd44 	bl	8000d08 <HAL_GPIO_WritePin>
 8000280:	e03f      	b.n	8000302 <main+0xea>
    }
    else if (pressed == 1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d109      	bne.n	800029c <main+0x84>
    {
      HAL_GPIO_TogglePin(LEDBIT1_GPIO_Port, LEDBIT1_Pin);
 8000288:	2102      	movs	r1, #2
 800028a:	4824      	ldr	r0, [pc, #144]	; (800031c <main+0x104>)
 800028c:	f000 fd6e 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT0_GPIO_Port, LEDBIT0_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2101      	movs	r1, #1
 8000294:	4821      	ldr	r0, [pc, #132]	; (800031c <main+0x104>)
 8000296:	f000 fd37 	bl	8000d08 <HAL_GPIO_WritePin>
 800029a:	e032      	b.n	8000302 <main+0xea>
    }
    else if (pressed == 2)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b02      	cmp	r3, #2
 80002a0:	d109      	bne.n	80002b6 <main+0x9e>
    {
      HAL_GPIO_TogglePin(LEDBIT2_GPIO_Port, LEDBIT2_Pin);
 80002a2:	2104      	movs	r1, #4
 80002a4:	481d      	ldr	r0, [pc, #116]	; (800031c <main+0x104>)
 80002a6:	f000 fd61 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT1_GPIO_Port, LEDBIT1_Pin, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2102      	movs	r1, #2
 80002ae:	481b      	ldr	r0, [pc, #108]	; (800031c <main+0x104>)
 80002b0:	f000 fd2a 	bl	8000d08 <HAL_GPIO_WritePin>
 80002b4:	e025      	b.n	8000302 <main+0xea>
    }
    else if (pressed == 3)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d109      	bne.n	80002d0 <main+0xb8>
    {
      HAL_GPIO_TogglePin(LEDBIT3_GPIO_Port, LEDBIT3_Pin);
 80002bc:	2108      	movs	r1, #8
 80002be:	4817      	ldr	r0, [pc, #92]	; (800031c <main+0x104>)
 80002c0:	f000 fd54 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT2_GPIO_Port, LEDBIT2_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2104      	movs	r1, #4
 80002c8:	4814      	ldr	r0, [pc, #80]	; (800031c <main+0x104>)
 80002ca:	f000 fd1d 	bl	8000d08 <HAL_GPIO_WritePin>
 80002ce:	e018      	b.n	8000302 <main+0xea>
    }
    else if (pressed == 4)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d109      	bne.n	80002ea <main+0xd2>
    {
      HAL_GPIO_TogglePin(LEDBIT4_GPIO_Port, LEDBIT4_Pin);
 80002d6:	2110      	movs	r1, #16
 80002d8:	4810      	ldr	r0, [pc, #64]	; (800031c <main+0x104>)
 80002da:	f000 fd47 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT3_GPIO_Port, LEDBIT3_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <main+0x104>)
 80002e4:	f000 fd10 	bl	8000d08 <HAL_GPIO_WritePin>
 80002e8:	e00b      	b.n	8000302 <main+0xea>
    }
    else if (pressed == 5)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b05      	cmp	r3, #5
 80002ee:	d108      	bne.n	8000302 <main+0xea>
    {
      HAL_GPIO_TogglePin(LEDBIT5_GPIO_Port, LEDBIT5_Pin);
 80002f0:	2120      	movs	r1, #32
 80002f2:	480a      	ldr	r0, [pc, #40]	; (800031c <main+0x104>)
 80002f4:	f000 fd3a 	bl	8000d6c <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(LEDBIT4_GPIO_Port, LEDBIT4_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2110      	movs	r1, #16
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <main+0x104>)
 80002fe:	f000 fd03 	bl	8000d08 <HAL_GPIO_WritePin>
    }

    HAL_Delay(25*(pressed+1));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	1c5a      	adds	r2, r3, #1
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	009a      	lsls	r2, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f937 	bl	8000584 <HAL_Delay>
    if ( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 8000316:	e78a      	b.n	800022e <main+0x16>
 8000318:	40010c00 	.word	0x40010c00
 800031c:	40010800 	.word	0x40010800

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b090      	sub	sp, #64	; 0x40
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0318 	add.w	r3, r7, #24
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fae6 	bl	8001900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000342:	2301      	movs	r3, #1
 8000344:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034c:	2300      	movs	r3, #0
 800034e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fd31 	bl	8000dbc <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000360:	f000 f818 	bl	8000394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000368:	2301      	movs	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f88d 	bl	800149c <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000388:	f000 f804 	bl	8000394 <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3740      	adds	r7, #64	; 0x40
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000398:	b672      	cpsid	i
}
 800039a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800039c:	e7fe      	b.n	800039c <Error_Handler+0x8>

0800039e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800039e:	b480      	push	{r7}
 80003a0:	b083      	sub	sp, #12
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800041c:	e7fe      	b.n	800041c <NMI_Handler+0x4>

0800041e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <HardFault_Handler+0x4>

08000424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <MemManage_Handler+0x4>

0800042a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <BusFault_Handler+0x4>

08000430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler+0x4>

08000436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f875 	bl	800054c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}

08000466 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
	...

08000474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	; (80004ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	; (80004b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800049a:	f7ff ffe4 	bl	8000466 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800049e:	f001 fa0b 	bl	80018b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff feb9 	bl	8000218 <main>
  bx lr
 80004a6:	4770      	bx	lr
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004b0:	08001a00 	.word	0x08001a00
  ldr r2, =_sbss
 80004b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004b8:	2000002c 	.word	0x2000002c

080004bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC1_2_IRQHandler>
	...

080004c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <HAL_Init+0x28>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <HAL_Init+0x28>)
 80004ca:	f043 0310 	orr.w	r3, r3, #16
 80004ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004d0:	2003      	movs	r0, #3
 80004d2:	f000 f92b 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d6:	200f      	movs	r0, #15
 80004d8:	f000 f808 	bl	80004ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004dc:	f7ff ff6a 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40022000 	.word	0x40022000

080004ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x54>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <HAL_InitTick+0x58>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000502:	fbb3 f3f1 	udiv	r3, r3, r1
 8000506:	fbb2 f3f3 	udiv	r3, r2, r3
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f95a 	bl	80007c4 <HAL_SYSTICK_Config>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
 8000518:	e00e      	b.n	8000538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d80a      	bhi.n	8000536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000528:	f000 f920 	bl	800076c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <HAL_InitTick+0x5c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000532:	2300      	movs	r3, #0
 8000534:	e000      	b.n	8000538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000000 	.word	0x20000000
 8000544:	20000008 	.word	0x20000008
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_IncTick+0x1c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <HAL_IncTick+0x20>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4413      	add	r3, r2
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x20>)
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000008 	.word	0x20000008
 800056c:	20000028 	.word	0x20000028

08000570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return uwTick;
 8000574:	4b02      	ldr	r3, [pc, #8]	; (8000580 <HAL_GetTick+0x10>)
 8000576:	681b      	ldr	r3, [r3, #0]
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	20000028 	.word	0x20000028

08000584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800058c:	f7ff fff0 	bl	8000570 <HAL_GetTick>
 8000590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800059c:	d005      	beq.n	80005aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_Delay+0x44>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	461a      	mov	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4413      	add	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005aa:	bf00      	nop
 80005ac:	f7ff ffe0 	bl	8000570 <HAL_GetTick>
 80005b0:	4602      	mov	r2, r0
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d8f7      	bhi.n	80005ac <HAL_Delay+0x28>
  {
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000008 	.word	0x20000008

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800070c:	f7ff ff90 	bl	8000630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b07      	cmp	r3, #7
 8000738:	d00f      	beq.n	800075a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b06      	cmp	r3, #6
 800073e:	d00c      	beq.n	800075a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d009      	beq.n	800075a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d006      	beq.n	800075a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d003      	beq.n	800075a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000752:	2192      	movs	r1, #146	; 0x92
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000756:	f7ff fe22 	bl	800039e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff36 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	08001928 	.word	0x08001928

0800076c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
 8000778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2b0f      	cmp	r3, #15
 8000782:	d903      	bls.n	800078c <HAL_NVIC_SetPriority+0x20>
 8000784:	21aa      	movs	r1, #170	; 0xaa
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <HAL_NVIC_SetPriority+0x54>)
 8000788:	f7ff fe09 	bl	800039e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b0f      	cmp	r3, #15
 8000790:	d903      	bls.n	800079a <HAL_NVIC_SetPriority+0x2e>
 8000792:	21ab      	movs	r1, #171	; 0xab
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <HAL_NVIC_SetPriority+0x54>)
 8000796:	f7ff fe02 	bl	800039e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079a:	f7ff ff3b 	bl	8000614 <__NVIC_GetPriorityGrouping>
 800079e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	68b9      	ldr	r1, [r7, #8]
 80007a4:	6978      	ldr	r0, [r7, #20]
 80007a6:	f7ff ff6d 	bl	8000684 <NVIC_EncodePriority>
 80007aa:	4602      	mov	r2, r0
 80007ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff3c 	bl	8000630 <__NVIC_SetPriority>
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	08001928 	.word	0x08001928

080007c4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff8b 	bl	80006e8 <SysTick_Config>
 80007d2:	4603      	mov	r3, r0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4aa1      	ldr	r2, [pc, #644]	; (8000a78 <HAL_GPIO_Init+0x29c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d013      	beq.n	800081e <HAL_GPIO_Init+0x42>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4aa0      	ldr	r2, [pc, #640]	; (8000a7c <HAL_GPIO_Init+0x2a0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d00f      	beq.n	800081e <HAL_GPIO_Init+0x42>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a9f      	ldr	r2, [pc, #636]	; (8000a80 <HAL_GPIO_Init+0x2a4>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d00b      	beq.n	800081e <HAL_GPIO_Init+0x42>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4a9e      	ldr	r2, [pc, #632]	; (8000a84 <HAL_GPIO_Init+0x2a8>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d007      	beq.n	800081e <HAL_GPIO_Init+0x42>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a9d      	ldr	r2, [pc, #628]	; (8000a88 <HAL_GPIO_Init+0x2ac>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d003      	beq.n	800081e <HAL_GPIO_Init+0x42>
 8000816:	21bd      	movs	r1, #189	; 0xbd
 8000818:	489c      	ldr	r0, [pc, #624]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 800081a:	f7ff fdc0 	bl	800039e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d005      	beq.n	8000834 <HAL_GPIO_Init+0x58>
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	041b      	lsls	r3, r3, #16
 8000830:	2b00      	cmp	r3, #0
 8000832:	d003      	beq.n	800083c <HAL_GPIO_Init+0x60>
 8000834:	21be      	movs	r1, #190	; 0xbe
 8000836:	4895      	ldr	r0, [pc, #596]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000838:	f7ff fdb1 	bl	800039e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	f000 821d 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	f000 8218 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b11      	cmp	r3, #17
 8000856:	f000 8213 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b02      	cmp	r3, #2
 8000860:	f000 820e 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	2b12      	cmp	r3, #18
 800086a:	f000 8209 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	4a87      	ldr	r2, [pc, #540]	; (8000a90 <HAL_GPIO_Init+0x2b4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	f000 8203 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a85      	ldr	r2, [pc, #532]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	f000 81fd 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4a83      	ldr	r2, [pc, #524]	; (8000a98 <HAL_GPIO_Init+0x2bc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	f000 81f7 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4a81      	ldr	r2, [pc, #516]	; (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	f000 81f1 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <HAL_GPIO_Init+0x2c4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	f000 81eb 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	4a7d      	ldr	r2, [pc, #500]	; (8000aa4 <HAL_GPIO_Init+0x2c8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	f000 81e5 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	f000 81e0 	beq.w	8000c80 <HAL_GPIO_Init+0x4a4>
 80008c0:	21bf      	movs	r1, #191	; 0xbf
 80008c2:	4872      	ldr	r0, [pc, #456]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 80008c4:	f7ff fd6b 	bl	800039e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c8:	e1da      	b.n	8000c80 <HAL_GPIO_Init+0x4a4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008ca:	2201      	movs	r2, #1
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	4013      	ands	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	f040 81c9 	bne.w	8000c7a <HAL_GPIO_Init+0x49e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a63      	ldr	r2, [pc, #396]	; (8000a78 <HAL_GPIO_Init+0x29c>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d013      	beq.n	8000918 <HAL_GPIO_Init+0x13c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a62      	ldr	r2, [pc, #392]	; (8000a7c <HAL_GPIO_Init+0x2a0>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d00f      	beq.n	8000918 <HAL_GPIO_Init+0x13c>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a61      	ldr	r2, [pc, #388]	; (8000a80 <HAL_GPIO_Init+0x2a4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d00b      	beq.n	8000918 <HAL_GPIO_Init+0x13c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <HAL_GPIO_Init+0x2a8>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d007      	beq.n	8000918 <HAL_GPIO_Init+0x13c>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a5f      	ldr	r2, [pc, #380]	; (8000a88 <HAL_GPIO_Init+0x2ac>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0x13c>
 8000910:	21cd      	movs	r1, #205	; 0xcd
 8000912:	485e      	ldr	r0, [pc, #376]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000914:	f7ff fd43 	bl	800039e <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4a61      	ldr	r2, [pc, #388]	; (8000aa4 <HAL_GPIO_Init+0x2c8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	f000 80c2 	beq.w	8000aa8 <HAL_GPIO_Init+0x2cc>
 8000924:	4a5f      	ldr	r2, [pc, #380]	; (8000aa4 <HAL_GPIO_Init+0x2c8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f200 80e8 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 800092c:	4a5a      	ldr	r2, [pc, #360]	; (8000a98 <HAL_GPIO_Init+0x2bc>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f000 80ba 	beq.w	8000aa8 <HAL_GPIO_Init+0x2cc>
 8000934:	4a58      	ldr	r2, [pc, #352]	; (8000a98 <HAL_GPIO_Init+0x2bc>)
 8000936:	4293      	cmp	r3, r2
 8000938:	f200 80e0 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 800093c:	4a58      	ldr	r2, [pc, #352]	; (8000aa0 <HAL_GPIO_Init+0x2c4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	f000 80b2 	beq.w	8000aa8 <HAL_GPIO_Init+0x2cc>
 8000944:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <HAL_GPIO_Init+0x2c4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	f200 80d8 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 800094e:	4293      	cmp	r3, r2
 8000950:	f000 80aa 	beq.w	8000aa8 <HAL_GPIO_Init+0x2cc>
 8000954:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x2b8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	f200 80d0 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 800095c:	4a4f      	ldr	r2, [pc, #316]	; (8000a9c <HAL_GPIO_Init+0x2c0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	f000 80a2 	beq.w	8000aa8 <HAL_GPIO_Init+0x2cc>
 8000964:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_GPIO_Init+0x2c0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	f200 80c8 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 800096c:	2b12      	cmp	r3, #18
 800096e:	d82b      	bhi.n	80009c8 <HAL_GPIO_Init+0x1ec>
 8000970:	2b12      	cmp	r3, #18
 8000972:	f200 80c3 	bhi.w	8000afc <HAL_GPIO_Init+0x320>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <HAL_GPIO_Init+0x1a0>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	08000aa9 	.word	0x08000aa9
 8000980:	080009d1 	.word	0x080009d1
 8000984:	08000a23 	.word	0x08000a23
 8000988:	08000af7 	.word	0x08000af7
 800098c:	08000afd 	.word	0x08000afd
 8000990:	08000afd 	.word	0x08000afd
 8000994:	08000afd 	.word	0x08000afd
 8000998:	08000afd 	.word	0x08000afd
 800099c:	08000afd 	.word	0x08000afd
 80009a0:	08000afd 	.word	0x08000afd
 80009a4:	08000afd 	.word	0x08000afd
 80009a8:	08000afd 	.word	0x08000afd
 80009ac:	08000afd 	.word	0x08000afd
 80009b0:	08000afd 	.word	0x08000afd
 80009b4:	08000afd 	.word	0x08000afd
 80009b8:	08000afd 	.word	0x08000afd
 80009bc:	08000afd 	.word	0x08000afd
 80009c0:	080009f9 	.word	0x080009f9
 80009c4:	08000a4d 	.word	0x08000a4d
 80009c8:	4a31      	ldr	r2, [pc, #196]	; (8000a90 <HAL_GPIO_Init+0x2b4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d06c      	beq.n	8000aa8 <HAL_GPIO_Init+0x2cc>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ce:	e095      	b.n	8000afc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d00b      	beq.n	80009f0 <HAL_GPIO_Init+0x214>
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d007      	beq.n	80009f0 <HAL_GPIO_Init+0x214>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x214>
 80009e8:	21d5      	movs	r1, #213	; 0xd5
 80009ea:	4828      	ldr	r0, [pc, #160]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 80009ec:	f7ff fcd7 	bl	800039e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e082      	b.n	8000afe <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d00b      	beq.n	8000a18 <HAL_GPIO_Init+0x23c>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d007      	beq.n	8000a18 <HAL_GPIO_Init+0x23c>
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x23c>
 8000a10:	21dc      	movs	r1, #220	; 0xdc
 8000a12:	481e      	ldr	r0, [pc, #120]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000a14:	f7ff fcc3 	bl	800039e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e06d      	b.n	8000afe <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d00b      	beq.n	8000a42 <HAL_GPIO_Init+0x266>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d007      	beq.n	8000a42 <HAL_GPIO_Init+0x266>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x266>
 8000a3a:	21e3      	movs	r1, #227	; 0xe3
 8000a3c:	4813      	ldr	r0, [pc, #76]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000a3e:	f7ff fcae 	bl	800039e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	3308      	adds	r3, #8
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e058      	b.n	8000afe <HAL_GPIO_Init+0x322>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d00b      	beq.n	8000a6c <HAL_GPIO_Init+0x290>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x290>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x290>
 8000a64:	21ea      	movs	r1, #234	; 0xea
 8000a66:	4809      	ldr	r0, [pc, #36]	; (8000a8c <HAL_GPIO_Init+0x2b0>)
 8000a68:	f7ff fc99 	bl	800039e <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	330c      	adds	r3, #12
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e043      	b.n	8000afe <HAL_GPIO_Init+0x322>
 8000a76:	bf00      	nop
 8000a78:	40010800 	.word	0x40010800
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	40011000 	.word	0x40011000
 8000a84:	40011400 	.word	0x40011400
 8000a88:	40011800 	.word	0x40011800
 8000a8c:	08001964 	.word	0x08001964
 8000a90:	10110000 	.word	0x10110000
 8000a94:	10210000 	.word	0x10210000
 8000a98:	10310000 	.word	0x10310000
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	10220000 	.word	0x10220000
 8000aa4:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00b      	beq.n	8000ac8 <HAL_GPIO_Init+0x2ec>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x2ec>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x2ec>
 8000ac0:	21f7      	movs	r1, #247	; 0xf7
 8000ac2:	4876      	ldr	r0, [pc, #472]	; (8000c9c <HAL_GPIO_Init+0x4c0>)
 8000ac4:	f7ff fc6b 	bl	800039e <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <HAL_GPIO_Init+0x2fa>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	623b      	str	r3, [r7, #32]
          break;
 8000ad4:	e013      	b.n	8000afe <HAL_GPIO_Init+0x322>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d105      	bne.n	8000aea <HAL_GPIO_Init+0x30e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	611a      	str	r2, [r3, #16]
          break;
 8000ae8:	e009      	b.n	8000afe <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aea:	2308      	movs	r3, #8
 8000aec:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	615a      	str	r2, [r3, #20]
          break;
 8000af4:	e003      	b.n	8000afe <HAL_GPIO_Init+0x322>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x322>
          break;
 8000afc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	2bff      	cmp	r3, #255	; 0xff
 8000b02:	d801      	bhi.n	8000b08 <HAL_GPIO_Init+0x32c>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	e001      	b.n	8000b0c <HAL_GPIO_Init+0x330>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	2bff      	cmp	r3, #255	; 0xff
 8000b12:	d802      	bhi.n	8000b1a <HAL_GPIO_Init+0x33e>
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	e002      	b.n	8000b20 <HAL_GPIO_Init+0x344>
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	3b08      	subs	r3, #8
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	210f      	movs	r1, #15
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	401a      	ands	r2, r3
 8000b32:	6a39      	ldr	r1, [r7, #32]
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 8096 	beq.w	8000c7a <HAL_GPIO_Init+0x49e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b4e:	4b54      	ldr	r3, [pc, #336]	; (8000ca0 <HAL_GPIO_Init+0x4c4>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a53      	ldr	r2, [pc, #332]	; (8000ca0 <HAL_GPIO_Init+0x4c4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <HAL_GPIO_Init+0x4c4>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b66:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <HAL_GPIO_Init+0x4c8>)
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3302      	adds	r3, #2
 8000b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	4013      	ands	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a46      	ldr	r2, [pc, #280]	; (8000ca8 <HAL_GPIO_Init+0x4cc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d013      	beq.n	8000bba <HAL_GPIO_Init+0x3de>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a45      	ldr	r2, [pc, #276]	; (8000cac <HAL_GPIO_Init+0x4d0>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d00d      	beq.n	8000bb6 <HAL_GPIO_Init+0x3da>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a44      	ldr	r2, [pc, #272]	; (8000cb0 <HAL_GPIO_Init+0x4d4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x3d6>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a43      	ldr	r2, [pc, #268]	; (8000cb4 <HAL_GPIO_Init+0x4d8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d101      	bne.n	8000bae <HAL_GPIO_Init+0x3d2>
 8000baa:	2303      	movs	r3, #3
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x3e0>
 8000bae:	2304      	movs	r3, #4
 8000bb0:	e004      	b.n	8000bbc <HAL_GPIO_Init+0x3e0>
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	e002      	b.n	8000bbc <HAL_GPIO_Init+0x3e0>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_Init+0x3e0>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbe:	f002 0203 	and.w	r2, r2, #3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4093      	lsls	r3, r2
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bcc:	4935      	ldr	r1, [pc, #212]	; (8000ca4 <HAL_GPIO_Init+0x4c8>)
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d006      	beq.n	8000bf4 <HAL_GPIO_Init+0x418>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	4933      	ldr	r1, [pc, #204]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
 8000bf2:	e006      	b.n	8000c02 <HAL_GPIO_Init+0x426>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000bfe:	4013      	ands	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <HAL_GPIO_Init+0x440>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c0e:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	4929      	ldr	r1, [pc, #164]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	604b      	str	r3, [r1, #4]
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x44e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4924      	ldr	r1, [pc, #144]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_Init+0x468>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	491f      	ldr	r1, [pc, #124]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	608b      	str	r3, [r1, #8]
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x476>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	491a      	ldr	r1, [pc, #104]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d006      	beq.n	8000c6c <HAL_GPIO_Init+0x490>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	4915      	ldr	r1, [pc, #84]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60cb      	str	r3, [r1, #12]
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x49e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <HAL_GPIO_Init+0x4dc>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f47f ae1d 	bne.w	80008ca <HAL_GPIO_Init+0xee>
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	08001964 	.word	0x08001964
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40011400 	.word	0x40011400
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d004      	beq.n	8000cd8 <HAL_GPIO_ReadPin+0x1c>
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	0c1b      	lsrs	r3, r3, #16
 8000cd2:	041b      	lsls	r3, r3, #16
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <HAL_GPIO_ReadPin+0x26>
 8000cd8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_GPIO_ReadPin+0x48>)
 8000cde:	f7ff fb5e 	bl	800039e <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e001      	b.n	8000cf8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08001964 	.word	0x08001964

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <HAL_GPIO_WritePin+0x20>
 8000d1e:	887b      	ldrh	r3, [r7, #2]
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d004      	beq.n	8000d32 <HAL_GPIO_WritePin+0x2a>
 8000d28:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <HAL_GPIO_WritePin+0x60>)
 8000d2e:	f7ff fb36 	bl	800039e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000d32:	787b      	ldrb	r3, [r7, #1]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <HAL_GPIO_WritePin+0x40>
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d004      	beq.n	8000d48 <HAL_GPIO_WritePin+0x40>
 8000d3e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_GPIO_WritePin+0x60>)
 8000d44:	f7ff fb2b 	bl	800039e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000d48:	787b      	ldrb	r3, [r7, #1]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d54:	e003      	b.n	8000d5e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	041a      	lsls	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	611a      	str	r2, [r3, #16]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08001964 	.word	0x08001964

08000d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000d78:	887b      	ldrh	r3, [r7, #2]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <HAL_GPIO_TogglePin+0x1c>
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	0c1b      	lsrs	r3, r3, #16
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d004      	beq.n	8000d92 <HAL_GPIO_TogglePin+0x26>
 8000d88:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <HAL_GPIO_TogglePin+0x4c>)
 8000d8e:	f7ff fb06 	bl	800039e <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	041a      	lsls	r2, r3, #16
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	400b      	ands	r3, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	611a      	str	r2, [r3, #16]
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	08001964 	.word	0x08001964

08000dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e35c      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d01c      	beq.n	8000e10 <HAL_RCC_OscConfig+0x54>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d116      	bne.n	8000e10 <HAL_RCC_OscConfig+0x54>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d110      	bne.n	8000e10 <HAL_RCC_OscConfig+0x54>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10a      	bne.n	8000e10 <HAL_RCC_OscConfig+0x54>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d104      	bne.n	8000e10 <HAL_RCC_OscConfig+0x54>
 8000e06:	f240 1167 	movw	r1, #359	; 0x167
 8000e0a:	48a5      	ldr	r0, [pc, #660]	; (80010a0 <HAL_RCC_OscConfig+0x2e4>)
 8000e0c:	f7ff fac7 	bl	800039e <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 809a 	beq.w	8000f52 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00e      	beq.n	8000e44 <HAL_RCC_OscConfig+0x88>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2e:	d009      	beq.n	8000e44 <HAL_RCC_OscConfig+0x88>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e38:	d004      	beq.n	8000e44 <HAL_RCC_OscConfig+0x88>
 8000e3a:	f240 116d 	movw	r1, #365	; 0x16d
 8000e3e:	4898      	ldr	r0, [pc, #608]	; (80010a0 <HAL_RCC_OscConfig+0x2e4>)
 8000e40:	f7ff faad 	bl	800039e <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e44:	4b97      	ldr	r3, [pc, #604]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d00c      	beq.n	8000e6a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e50:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d112      	bne.n	8000e82 <HAL_RCC_OscConfig+0xc6>
 8000e5c:	4b91      	ldr	r3, [pc, #580]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e68:	d10b      	bne.n	8000e82 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	4b8e      	ldr	r3, [pc, #568]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d06c      	beq.n	8000f50 <HAL_RCC_OscConfig+0x194>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d168      	bne.n	8000f50 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e302      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0xde>
 8000e8c:	4b85      	ldr	r3, [pc, #532]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a84      	ldr	r2, [pc, #528]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e02e      	b.n	8000ef8 <HAL_RCC_OscConfig+0x13c>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x100>
 8000ea2:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a7f      	ldr	r2, [pc, #508]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b7d      	ldr	r3, [pc, #500]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7c      	ldr	r2, [pc, #496]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e01d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x13c>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x124>
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a76      	ldr	r2, [pc, #472]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a73      	ldr	r2, [pc, #460]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x13c>
 8000ee0:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a6f      	ldr	r2, [pc, #444]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a6c      	ldr	r2, [pc, #432]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb36 	bl	8000570 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fb32 	bl	8000570 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	; 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e2b6      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1a:	4b62      	ldr	r3, [pc, #392]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x14c>
 8000f26:	e014      	b.n	8000f52 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fb22 	bl	8000570 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2e:	e008      	b.n	8000f42 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f30:	f7ff fb1e 	bl	8000570 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	; 0x64
 8000f3c:	d901      	bls.n	8000f42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e2a2      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f42:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f0      	bne.n	8000f30 <HAL_RCC_OscConfig+0x174>
 8000f4e:	e000      	b.n	8000f52 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d079      	beq.n	8001052 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d008      	beq.n	8000f78 <HAL_RCC_OscConfig+0x1bc>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d004      	beq.n	8000f78 <HAL_RCC_OscConfig+0x1bc>
 8000f6e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000f72:	484b      	ldr	r0, [pc, #300]	; (80010a0 <HAL_RCC_OscConfig+0x2e4>)
 8000f74:	f7ff fa13 	bl	800039e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d904      	bls.n	8000f8a <HAL_RCC_OscConfig+0x1ce>
 8000f80:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000f84:	4846      	ldr	r0, [pc, #280]	; (80010a0 <HAL_RCC_OscConfig+0x2e4>)
 8000f86:	f7ff fa0a 	bl	800039e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f8a:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f96:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d11c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x220>
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x20a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e260      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4933      	ldr	r1, [pc, #204]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	e03a      	b.n	8001052 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d020      	beq.n	8001026 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_RCC_OscConfig+0x2ec>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fac1 	bl	8000570 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fabd 	bl	8000570 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e241      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4921      	ldr	r1, [pc, #132]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <HAL_RCC_OscConfig+0x2ec>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff faa0 	bl	8000570 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fa9c 	bl	8000570 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e220      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_RCC_OscConfig+0x2e8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d048      	beq.n	80010f0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <HAL_RCC_OscConfig+0x2bc>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d004      	beq.n	8001078 <HAL_RCC_OscConfig+0x2bc>
 800106e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <HAL_RCC_OscConfig+0x2e4>)
 8001074:	f7ff f993 	bl	800039e <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d021      	beq.n	80010c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_RCC_OscConfig+0x2f0>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fa73 	bl	8000570 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108c:	e010      	b.n	80010b0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108e:	f7ff fa6f 	bl	8000570 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d909      	bls.n	80010b0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e1f3      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
 80010a0:	080019a0 	.word	0x080019a0
 80010a4:	40021000 	.word	0x40021000
 80010a8:	42420000 	.word	0x42420000
 80010ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0e8      	beq.n	800108e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fbdd 	bl	800187c <RCC_Delay>
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c4:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_RCC_OscConfig+0x498>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fa51 	bl	8000570 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d2:	f7ff fa4d 	bl	8000570 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1d1      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e4:	4b5a      	ldr	r3, [pc, #360]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80c0 	beq.w	800127e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00c      	beq.n	8001124 <HAL_RCC_OscConfig+0x368>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d008      	beq.n	8001124 <HAL_RCC_OscConfig+0x368>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b05      	cmp	r3, #5
 8001118:	d004      	beq.n	8001124 <HAL_RCC_OscConfig+0x368>
 800111a:	f240 2111 	movw	r1, #529	; 0x211
 800111e:	484e      	ldr	r0, [pc, #312]	; (8001258 <HAL_RCC_OscConfig+0x49c>)
 8001120:	f7ff f93d 	bl	800039e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10d      	bne.n	800114c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113a:	61d3      	str	r3, [r2, #28]
 800113c:	4b44      	ldr	r3, [pc, #272]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	4b43      	ldr	r3, [pc, #268]	; (800125c <HAL_RCC_OscConfig+0x4a0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d118      	bne.n	800118a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <HAL_RCC_OscConfig+0x4a0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a3f      	ldr	r2, [pc, #252]	; (800125c <HAL_RCC_OscConfig+0x4a0>)
 800115e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001164:	f7ff fa04 	bl	8000570 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116c:	f7ff fa00 	bl	8000570 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	; 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e184      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <HAL_RCC_OscConfig+0x4a0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d106      	bne.n	80011a0 <HAL_RCC_OscConfig+0x3e4>
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a2e      	ldr	r2, [pc, #184]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	e02d      	b.n	80011fc <HAL_RCC_OscConfig+0x440>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10c      	bne.n	80011c2 <HAL_RCC_OscConfig+0x406>
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a28      	ldr	r2, [pc, #160]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011ae:	f023 0301 	bic.w	r3, r3, #1
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a25      	ldr	r2, [pc, #148]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011ba:	f023 0304 	bic.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	e01c      	b.n	80011fc <HAL_RCC_OscConfig+0x440>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x428>
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	4a20      	ldr	r2, [pc, #128]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6213      	str	r3, [r2, #32]
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0x440>
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a19      	ldr	r2, [pc, #100]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 80011f6:	f023 0304 	bic.w	r3, r3, #4
 80011fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d015      	beq.n	8001230 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff f9b4 	bl	8000570 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120a:	e00a      	b.n	8001222 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120c:	f7ff f9b0 	bl	8000570 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e132      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_OscConfig+0x494>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0ee      	beq.n	800120c <HAL_RCC_OscConfig+0x450>
 800122e:	e01d      	b.n	800126c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff f99e 	bl	8000570 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001236:	e013      	b.n	8001260 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001238:	f7ff f99a 	bl	8000570 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	4293      	cmp	r3, r2
 8001248:	d90a      	bls.n	8001260 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e11c      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	42420480 	.word	0x42420480
 8001258:	080019a0 	.word	0x080019a0
 800125c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4b8b      	ldr	r3, [pc, #556]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e5      	bne.n	8001238 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d105      	bne.n	800127e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b87      	ldr	r3, [pc, #540]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a86      	ldr	r2, [pc, #536]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4e4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d008      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4e4>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d004      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4e4>
 8001296:	f240 21af 	movw	r1, #687	; 0x2af
 800129a:	487e      	ldr	r0, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x6d8>)
 800129c:	f7ff f87f 	bl	800039e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80ee 	beq.w	8001486 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012aa:	4b79      	ldr	r3, [pc, #484]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	f000 80ce 	beq.w	8001454 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	f040 80b2 	bne.w	8001426 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_OscConfig+0x522>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d004      	beq.n	80012de <HAL_RCC_OscConfig+0x522>
 80012d4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80012d8:	486e      	ldr	r0, [pc, #440]	; (8001494 <HAL_RCC_OscConfig+0x6d8>)
 80012da:	f7ff f860 	bl	800039e <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d04a      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012ee:	d045      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012f8:	d040      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001302:	d03b      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800130c:	d036      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001316:	d031      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001320:	d02c      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800132a:	d027      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001334:	d022      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800133e:	d01d      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001348:	d018      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001352:	d013      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800135c:	d00e      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001366:	d009      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001370:	d004      	beq.n	800137c <HAL_RCC_OscConfig+0x5c0>
 8001372:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001376:	4847      	ldr	r0, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x6d8>)
 8001378:	f7ff f811 	bl	800039e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_RCC_OscConfig+0x6dc>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff f8f5 	bl	8000570 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff f8f1 	bl	8000570 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e075      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139c:	4b3c      	ldr	r3, [pc, #240]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b0:	d116      	bne.n	80013e0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_RCC_OscConfig+0x612>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c2:	d004      	beq.n	80013ce <HAL_RCC_OscConfig+0x612>
 80013c4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80013c8:	4832      	ldr	r0, [pc, #200]	; (8001494 <HAL_RCC_OscConfig+0x6d8>)
 80013ca:	f7fe ffe8 	bl	800039e <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	492d      	ldr	r1, [pc, #180]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a19      	ldr	r1, [r3, #32]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	430b      	orrs	r3, r1
 80013f2:	4927      	ldr	r1, [pc, #156]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x6dc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff f8b7 	bl	8000570 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff f8b3 	bl	8000570 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e037      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x64a>
 8001424:	e02f      	b.n	8001486 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_RCC_OscConfig+0x6dc>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff f8a0 	bl	8000570 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff f89c 	bl	8000570 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e020      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x678>
 8001452:	e018      	b.n	8001486 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e013      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x6d4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	429a      	cmp	r2, r3
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	080019a0 	.word	0x080019a0
 8001498:	42420060 	.word	0x42420060

0800149c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e176      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d116      	bne.n	80014ea <HAL_RCC_ClockConfig+0x4e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d110      	bne.n	80014ea <HAL_RCC_ClockConfig+0x4e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d10a      	bne.n	80014ea <HAL_RCC_ClockConfig+0x4e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d104      	bne.n	80014ea <HAL_RCC_ClockConfig+0x4e>
 80014e0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80014e4:	4874      	ldr	r0, [pc, #464]	; (80016b8 <HAL_RCC_ClockConfig+0x21c>)
 80014e6:	f7fe ff5a 	bl	800039e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <HAL_RCC_ClockConfig+0x6a>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d007      	beq.n	8001506 <HAL_RCC_ClockConfig+0x6a>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d004      	beq.n	8001506 <HAL_RCC_ClockConfig+0x6a>
 80014fc:	f240 3139 	movw	r1, #825	; 0x339
 8001500:	486d      	ldr	r0, [pc, #436]	; (80016b8 <HAL_RCC_ClockConfig+0x21c>)
 8001502:	f7fe ff4c 	bl	800039e <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001506:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d910      	bls.n	8001536 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001514:	4b69      	ldr	r3, [pc, #420]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 0207 	bic.w	r2, r3, #7
 800151c:	4967      	ldr	r1, [pc, #412]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e133      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d049      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a5b      	ldr	r2, [pc, #364]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001554:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001558:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001566:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 800156c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001570:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d024      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b80      	cmp	r3, #128	; 0x80
 8001580:	d020      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b90      	cmp	r3, #144	; 0x90
 8001588:	d01c      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2ba0      	cmp	r3, #160	; 0xa0
 8001590:	d018      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2bb0      	cmp	r3, #176	; 0xb0
 8001598:	d014      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2bc0      	cmp	r3, #192	; 0xc0
 80015a0:	d010      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2bd0      	cmp	r3, #208	; 0xd0
 80015a8:	d00c      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2be0      	cmp	r3, #224	; 0xe0
 80015b0:	d008      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2bf0      	cmp	r3, #240	; 0xf0
 80015b8:	d004      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x128>
 80015ba:	f240 315f 	movw	r1, #863	; 0x35f
 80015be:	483e      	ldr	r0, [pc, #248]	; (80016b8 <HAL_RCC_ClockConfig+0x21c>)
 80015c0:	f7fe feed 	bl	800039e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b3e      	ldr	r3, [pc, #248]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	493b      	ldr	r1, [pc, #236]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d051      	beq.n	8001686 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_RCC_ClockConfig+0x168>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d008      	beq.n	8001604 <HAL_RCC_ClockConfig+0x168>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_RCC_ClockConfig+0x168>
 80015fa:	f240 3166 	movw	r1, #870	; 0x366
 80015fe:	482e      	ldr	r0, [pc, #184]	; (80016b8 <HAL_RCC_ClockConfig+0x21c>)
 8001600:	f7fe fecd 	bl	800039e <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d107      	bne.n	800161c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d115      	bne.n	8001644 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0c0      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d107      	bne.n	8001634 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001624:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d109      	bne.n	8001644 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0b4      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0ac      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 0203 	bic.w	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	491b      	ldr	r1, [pc, #108]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001656:	f7fe ff8b 	bl	8000570 <HAL_GetTick>
 800165a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165c:	e00a      	b.n	8001674 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165e:	f7fe ff87 	bl	8000570 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e094      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_ClockConfig+0x224>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 020c 	and.w	r2, r3, #12
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	429a      	cmp	r2, r3
 8001684:	d1eb      	bne.n	800165e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d217      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 0207 	bic.w	r2, r3, #7
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_ClockConfig+0x220>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d008      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e073      	b.n	800179e <HAL_RCC_ClockConfig+0x302>
 80016b6:	bf00      	nop
 80016b8:	080019a0 	.word	0x080019a0
 80016bc:	40022000 	.word	0x40022000
 80016c0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d025      	beq.n	800171c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d018      	beq.n	800170a <HAL_RCC_ClockConfig+0x26e>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016e0:	d013      	beq.n	800170a <HAL_RCC_ClockConfig+0x26e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80016ea:	d00e      	beq.n	800170a <HAL_RCC_ClockConfig+0x26e>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016f4:	d009      	beq.n	800170a <HAL_RCC_ClockConfig+0x26e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80016fe:	d004      	beq.n	800170a <HAL_RCC_ClockConfig+0x26e>
 8001700:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001704:	4828      	ldr	r0, [pc, #160]	; (80017a8 <HAL_RCC_ClockConfig+0x30c>)
 8001706:	f7fe fe4a 	bl	800039e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_RCC_ClockConfig+0x310>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	4925      	ldr	r1, [pc, #148]	; (80017ac <HAL_RCC_ClockConfig+0x310>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d026      	beq.n	8001776 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d018      	beq.n	8001762 <HAL_RCC_ClockConfig+0x2c6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001738:	d013      	beq.n	8001762 <HAL_RCC_ClockConfig+0x2c6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001742:	d00e      	beq.n	8001762 <HAL_RCC_ClockConfig+0x2c6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x2c6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001756:	d004      	beq.n	8001762 <HAL_RCC_ClockConfig+0x2c6>
 8001758:	f240 31ab 	movw	r1, #939	; 0x3ab
 800175c:	4812      	ldr	r0, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x30c>)
 800175e:	f7fe fe1e 	bl	800039e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x310>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_RCC_ClockConfig+0x310>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001776:	f000 f821 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 800177a:	4602      	mov	r2, r0
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_RCC_ClockConfig+0x310>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	490a      	ldr	r1, [pc, #40]	; (80017b0 <HAL_RCC_ClockConfig+0x314>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x318>)
 8001790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x31c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fea8 	bl	80004ec <HAL_InitTick>

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	080019a0 	.word	0x080019a0
 80017ac:	40021000 	.word	0x40021000
 80017b0:	080019e8 	.word	0x080019e8
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017bc:	b490      	push	{r4, r7}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_RCC_GetSysClockFreq+0xb0>)
 80017c4:	1d3c      	adds	r4, r7, #4
 80017c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017cc:	f240 2301 	movw	r3, #513	; 0x201
 80017d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017e6:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d002      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x40>
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_GetSysClockFreq+0x46>
 80017fa:	e02d      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017fe:	623b      	str	r3, [r7, #32]
      break;
 8001800:	e02d      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800180e:	4413      	add	r3, r2
 8001810:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001814:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	0c5b      	lsrs	r3, r3, #17
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800182e:	4413      	add	r3, r2
 8001830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001834:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb8>)
 800183a:	fb02 f203 	mul.w	r2, r2, r3
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	fbb2 f3f3 	udiv	r3, r2, r3
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	e004      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_RCC_GetSysClockFreq+0xbc>)
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	623b      	str	r3, [r7, #32]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185a:	623b      	str	r3, [r7, #32]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	6a3b      	ldr	r3, [r7, #32]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bc90      	pop	{r4, r7}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	080019d8 	.word	0x080019d8
 8001870:	40021000 	.word	0x40021000
 8001874:	007a1200 	.word	0x007a1200
 8001878:	003d0900 	.word	0x003d0900

0800187c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <RCC_Delay+0x34>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <RCC_Delay+0x38>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	0a5b      	lsrs	r3, r3, #9
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001898:	bf00      	nop
  }
  while (Delay --);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	60fa      	str	r2, [r7, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <RCC_Delay+0x1c>
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000000 	.word	0x20000000
 80018b4:	10624dd3 	.word	0x10624dd3

080018b8 <__libc_init_array>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	2600      	movs	r6, #0
 80018bc:	4d0c      	ldr	r5, [pc, #48]	; (80018f0 <__libc_init_array+0x38>)
 80018be:	4c0d      	ldr	r4, [pc, #52]	; (80018f4 <__libc_init_array+0x3c>)
 80018c0:	1b64      	subs	r4, r4, r5
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	42a6      	cmp	r6, r4
 80018c6:	d109      	bne.n	80018dc <__libc_init_array+0x24>
 80018c8:	f000 f822 	bl	8001910 <_init>
 80018cc:	2600      	movs	r6, #0
 80018ce:	4d0a      	ldr	r5, [pc, #40]	; (80018f8 <__libc_init_array+0x40>)
 80018d0:	4c0a      	ldr	r4, [pc, #40]	; (80018fc <__libc_init_array+0x44>)
 80018d2:	1b64      	subs	r4, r4, r5
 80018d4:	10a4      	asrs	r4, r4, #2
 80018d6:	42a6      	cmp	r6, r4
 80018d8:	d105      	bne.n	80018e6 <__libc_init_array+0x2e>
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e0:	4798      	blx	r3
 80018e2:	3601      	adds	r6, #1
 80018e4:	e7ee      	b.n	80018c4 <__libc_init_array+0xc>
 80018e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ea:	4798      	blx	r3
 80018ec:	3601      	adds	r6, #1
 80018ee:	e7f2      	b.n	80018d6 <__libc_init_array+0x1e>
 80018f0:	080019f8 	.word	0x080019f8
 80018f4:	080019f8 	.word	0x080019f8
 80018f8:	080019f8 	.word	0x080019f8
 80018fc:	080019fc 	.word	0x080019fc

08001900 <memset>:
 8001900:	4603      	mov	r3, r0
 8001902:	4402      	add	r2, r0
 8001904:	4293      	cmp	r3, r2
 8001906:	d100      	bne.n	800190a <memset+0xa>
 8001908:	4770      	bx	lr
 800190a:	f803 1b01 	strb.w	r1, [r3], #1
 800190e:	e7f9      	b.n	8001904 <memset+0x4>

08001910 <_init>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	bf00      	nop
 8001914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001916:	bc08      	pop	{r3}
 8001918:	469e      	mov	lr, r3
 800191a:	4770      	bx	lr

0800191c <_fini>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr
